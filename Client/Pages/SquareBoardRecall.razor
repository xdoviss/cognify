@page "/board-recall"
@inject HttpClient Http
@using cognify.Client.Shared.SquareBoardRecall
<h3>Square Board Recall</h3>

@if (!game.IsGameStarted)
{
    <button @onclick="StartGame">Start</button>
}
else
{
    <div class="game-container">
        <p>Score: @game.Score</p>
        <p>Health: @game.Health</p>

        <div class="board">
            @foreach (var card in game.Cards)
            {
                <div class="card" @onclick="() => FlipCard(card)">
                    @if (card.IsFlipped)
                    {
                        <img src="@card.Image" alt="Card Image" />
                    }
                    else
                    {
                        <div class="card-back"></div>
                    }
                </div>
            }
        </div>
    </div>
}

<p>@game.StatusMessage</p>

@code {
    private SquareBoardRecallGame game = new SquareBoardRecallGame();

    private async Task StartGame()
    {
        game.IsGameStarted = true;

        // Use extension method to reset the game state
        game.ResetGameState();

        await InitializeGame();

        foreach (var card in game.Cards)
        {
            card.IsFlipped = true;
        }

        // Use extension method to update the status message
        game.UpdateStatusMessage("Memorize the cards!");
        StateHasChanged();

        await Task.Delay(3000);

        foreach (var card in game.Cards)
        {
            card.IsFlipped = false;
        }

        game.UpdateStatusMessage("Start matching the cards!");
        StateHasChanged();
    }

    private void FlipCard(SquareBoardRecallGame.Card card)
    {
        if (!card.IsFlipped && game.FirstFlippedCard != card)
        {
            card.IsFlipped = true;

            if (game.FirstFlippedCard == null)
            {
                game.FirstFlippedCard = card;
            }
            else if (game.SecondFlippedCard == null)
            {
                game.SecondFlippedCard = card;
                CheckForMatch();
            }
        }
    }

    private async void CheckForMatch()
    {
        if (game.FirstFlippedCard != null && game.SecondFlippedCard != null)
        {
            // If the two cards match
            if (game.FirstFlippedCard.Id == game.SecondFlippedCard.Id)
            {
                game.Score++;
                game.UpdateStatusMessage("It's a match!");
                // No need to flip the cards back, so we just reset the flipped cards to null
                game.ResetFlippedCards();  // Reset the flipped card references, but leave the cards as flipped
                StateHasChanged();

                // Check if all cards are flipped (i.e., game won)
                if (game.Cards.All(c => c.IsFlipped))
                {
                    game.UpdateStatusMessage("All matched! Starting new round...");
                    await Task.Delay(2000);  // Delay to show the "all matched" message
                    await StartNewRound();  // Start new round with the same score
                }
            }
            else
            {
                // If the two cards do not match
                game.Health--;
                game.UpdateStatusMessage("No match!");

                if (game.Health <= 0)
                {
                    game.UpdateStatusMessage("Game Over!");
                    EndGame();
                    return;
                }

                // Flip the unmatched cards back after a short delay
                await Task.Delay(1000);

                // Flip the cards back to face down
                game.FirstFlippedCard.IsFlipped = false;
                game.SecondFlippedCard.IsFlipped = false;

                // Reset the flipped card references
                game.ResetFlippedCards();  // Reset the flipped cards for the next attempt
                StateHasChanged();
            }
        }
    }


    private async Task InitializeGame()
    {
        try
        {
            game.Cards = await Http.GetFromJsonAsync<List<SquareBoardRecallGame.Card>>("/api/SquareBoardRecall/initialize-game");
        }
        catch (Exception ex)
        {
            game.UpdateStatusMessage("Error initializing game: " + ex.Message);
        }
    }

    private async Task StartNewRound()
    {
        // Reinitialize the game with shuffled cards
        await InitializeGame();  

        foreach (var card in game.Cards)
        {
            card.IsFlipped = true;
        }
        game.UpdateStatusMessage("Memorize the cards!");
        StateHasChanged();
        game.CanFlip = false;
        await Task.Delay(3000);

        foreach (var card in game.Cards)
        {
            card.IsFlipped = false;
        }

        game.UpdateStatusMessage("New round started! Match the cards!");
        game.CanFlip = true;
        StateHasChanged();
    }
    private void EndGame()
    {
        game.IsGameStarted = false;
        game.UpdateStatusMessage("Game Over! Click 'Start' to try again."); // Use the extension method to update the message
    }

}

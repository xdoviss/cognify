@page "/word-recall"
@inject HttpClient Http
@using cognify.Shared
@using cognify.Shared.WordRecall

<h3>Word Recall</h3>

@if (GameStatistics == null || GameStatistics.State == GameState.NotStarted)
	{
		<div class="game-container">
			<button @onclick="StartGame">Start</button>
			<button @onclick="ShowHowToPlay">How To Play</button>

			<HowToPlayDialog IsVisible="isHowToPlayVisible" OnClose="HideHowToPlay" />
		</div>
	}
else if (GameStatistics.State == GameState.InProgress)
	{
		<div class="game-container">
			<p>Current Word:</p>
			<p id="current-word">@currentWord</p>
			<p>Score: @GameStatistics.Score</p>
			<div id="health" data-health="@GameStatistics.Health"></div>

			<button @onclick="() => CheckWord(true)">New</button>
			<button @onclick="() => CheckWord(false)">Seen</button>
		</div>
	}
else
	{
		<div class="game-container">
			<p>Game Finished</p>
			<p>Highscore: @highscore</p>
			<p>Score: @GameStatistics.Score</p>
			<button @onclick="StartGame">Restart</button>
		</div>
	}

@code {
	private Random random = new Random();
	private bool isHowToPlayVisible = false;

	private string currentWord;
	private List<string> seenWords = new List<string>();
	private int highscore = 0;

	WordRecallStatistics? GameStatistics = null;

	private async Task StartGame()
		{
		var response = await Http.PostAsync("api/WordRecall/start", null);
		if (response.IsSuccessStatusCode)
			{
			GameStatistics = await response.Content.ReadFromJsonAsync<WordRecallStatistics>();
			await GetNewWord();
			}
		else
			{
			Console.WriteLine("Failed to start the game.");
			}
		}

	private void HideHowToPlay() => isHowToPlayVisible = false;
	private void ShowHowToPlay() => isHowToPlayVisible = true;

	protected override async Task OnInitializedAsync() => await GetNewWord();

	private async Task GetNewWord()
		{
		try
			{
			currentWord = await Http.GetStringAsync("http://localhost:5296/api/WordRecall/");
			}
		catch (Exception ex)
			{
			Console.WriteLine($"Error fetching new word: {ex.Message}");
			currentWord = "Error fetching word";
			}
		}

	private async Task ShowWord()
		{
		if (random.Next(2) == 0 && seenWords.Count > 0)
			{
			currentWord = seenWords[random.Next(seenWords.Count)];
			}
		else
			{
			if (!seenWords.Contains(currentWord))
				{
				seenWords.Add(currentWord);
				}

			await GetNewWord();
			}
		}

	private async Task CheckWord(bool isNew)
		{
		if ((isNew && !seenWords.Contains(currentWord)) || (!isNew && seenWords.Contains(currentWord)))
			{
			var response = await Http.PostAsJsonAsync("api/WordRecall/update-score", 1);
			if (response.IsSuccessStatusCode)
				{
				GameStatistics = await response.Content.ReadFromJsonAsync<WordRecallStatistics>();
				}
			}
		else
			{
			var response = await Http.PostAsJsonAsync("api/WordRecall/update-health", GameStatistics.Health - 1);
			if (response.IsSuccessStatusCode)
				{
				GameStatistics = await response.Content.ReadFromJsonAsync<WordRecallStatistics>();
				}
			}

		if (GameStatistics.Health > 0)
			{
			await ShowWord();
			}
		else
			{
			var response = await Http.PostAsJsonAsync("api/WordRecall/update-state", GameState.Finished);
			if (response.IsSuccessStatusCode)
				GameStatistics = await response.Content.ReadFromJsonAsync<WordRecallStatistics>();

			highscore = await Http.GetFromJsonAsync<int>("api/WordRecall/highscore");
			}
		}
}
